;
; SPDX-License-Identifier: GPL-3.0-or-later
;
; Author: John David Sprunger
; Date: 4/20/2021
;

.program ir_nec

; We're running at 4*38222Hz = 152888
; We're using a 25% carrier duty cycle
.wrap_target
; Block for data to be available on the TxFifo
; TODO: auto pull instead?
    pull
    out y, 32
    pull
    out x, 32
header_high:
    set pins, 1
    set pins, 0 [1]
    jmp y--, header_high
header_low:
    jmp x--, header_low [3]

; Start sending data, 32 bits per message
    pull
    set x, 31
data_loop:
; 21.5 loops ~= 562.5us*152888hz/4 cycles/loop, close enough
    set y, 21
pulse_loop:
    set pins, 1
    set pins, 0 [1]
    jmp y--, pulse_loop

    out y, 1
    jmp !y, zero_cond
; 10.75 loops ~= 562.5us*152888hz/8 cycles/loop
; Do 0.75 loops of delay with 6 extra cycles, 2 above and 4 below
    set y, 10 [2]
    jmp delay_loop
zero_cond:
; 32.25 loops ~= 1687.5us*152888hz/8 cycles/loop
; Remove 1.25 loops with 10 extra cycles, 2 above and 8 below
; TODO: delays are a little long, ~620us and ~1750us vs ~562 and ~1690, respectively
; ~13us is coming from the end and beginning of data_loop,
; but the other ~50us is still unaccounted for.
    set y, 31 [7]
delay_loop: ; 8 cycles/loop
    jmp y--, delay_loop [7]
    jmp x--, data_loop

    set y, 21
end_loop: ; 4 cycles/loop
    set pins, 1
    set pins, 0 [1]
    jmp y--, end_loop
.wrap

% c-sdk {
static inline void ir_nec_program_init(PIO pio, uint sm, uint offset, uint pin, float div)
{
    pio_sm_config c = ir_nec_program_get_default_config(offset);

    // Map the state machine's SET pin group to one pin, namely the `pin`
    // parameter to this function.
    sm_config_set_set_pins(&c, pin, 1);
    // Set the clock divider
    sm_config_set_clkdiv(&c, div);
    // Set the out shift register direction
    sm_config_set_out_shift(&c, false, false, 32);
    // Set this pin's GPIO function (connect PIO to the pad)
    pio_gpio_init(pio, pin);
    // Set the pin direction to output at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);

    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);
    // Set the state machine running
    pio_sm_set_enabled(pio, sm, true);
}
%}
